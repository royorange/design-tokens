// Generated by Design Tokens - DO NOT EDIT
// Last updated: 2025-07-18T07:40:23.764Z

import 'package:flutter/material.dart';

/// 颜色常量定义
class AppColorSchemes {

  // Color Schemes
  static const ColorScheme lightColorScheme = ColorScheme(
    brightness: Brightness.light,
    primary: primary500,
    onPrimary: white,
    primaryContainer: primary100,
    onPrimaryContainer: primary900,
    secondary: primary400,
    onSecondary: white,
    secondaryContainer: primary100,
    onSecondaryContainer: primary900,
    error: Color(0xFFDC2626),
    onError: white,
    errorContainer: Color(0xFFFFEBEE),
    onErrorContainer: Color(0xFF7F1D1D),
    surface: white,
    onSurface: neutral900,
    surfaceContainerHighest: neutral100,
    onSurfaceVariant: neutral700,
    outline: neutral400,
    outlineVariant: neutral300,
    shadow: black,
    scrim: black,
    inverseSurface: neutral900,
    onInverseSurface: white,
    inversePrimary: primary300,
  );

  static const ColorScheme darkColorScheme = ColorScheme(
    brightness: Brightness.dark,
    primary: primary400,
    onPrimary: primary900,
    primaryContainer: primary700,
    onPrimaryContainer: primary100,
    secondary: primary300,
    onSecondary: primary900,
    secondaryContainer: primary700,
    onSecondaryContainer: primary100,
    error: Color(0xFFEF4444),
    onError: white,
    errorContainer: Color(0xFF991B1B),
    onErrorContainer: Color(0xFFFECACA),
    surface: neutral900,
    onSurface: neutral100,
    surfaceContainerHighest: neutral800,
    onSurfaceVariant: neutral300,
    outline: neutral600,
    outlineVariant: neutral700,
    shadow: black,
    scrim: black,
    inverseSurface: neutral100,
    onInverseSurface: neutral900,
    inversePrimary: primary600,
  );
}

/// Design Tokens 直接访问
class DesignTokens {
  static const colors = _ColorTokens();
  static const spacing = _SpacingTokens();
  static const radius = _RadiusTokens();

  // Generated themes
  static ThemeData lightTheme = _generateLightTheme();
  static ThemeData darkTheme = _generateDarkTheme();
}

class _ColorTokens {
  const _ColorTokens();

  // Primary colors
  Color get primary => AppColorSchemes.primary500;
  Color get primaryLight => AppColorSchemes.primary400;
  Color get primaryDark => AppColorSchemes.primary600;
}

class _SpacingTokens {
  const _SpacingTokens();


  // Semantic spacing
  double get xs => s1;
  double get sm => s2;
  double get md => s4;
  double get lg => s6;
  double get xl => s8;
}

class _RadiusTokens {
  const _RadiusTokens();

}

// Theme definitions
ThemeData _generateLightTheme() {
  return ThemeData(
    useMaterial3: true,
    brightness: Brightness.light,
    colorScheme: AppColorSchemes.lightColorScheme,
    scaffoldBackgroundColor: AppColorSchemes.neutral50,
    appBarTheme: const AppBarTheme(
      centerTitle: true,
      elevation: 0,
      backgroundColor: AppColorSchemes.white,
      foregroundColor: AppColorSchemes.neutral900,
    ),
    elevatedButtonTheme: ElevatedButtonThemeData(
      style: ElevatedButton.styleFrom(
        foregroundColor: AppColorSchemes.white,
        backgroundColor: AppColorSchemes.primary500,
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(DesignTokens.radius.md),
        ),
        padding: EdgeInsets.symmetric(
          horizontal: DesignTokens.spacing.s4,
          vertical: DesignTokens.spacing.s3,
        ),
      ),
    ),
  );
}

ThemeData _generateDarkTheme() {
  return ThemeData(
    useMaterial3: true,
    brightness: Brightness.dark,
    colorScheme: AppColorSchemes.darkColorScheme,
    scaffoldBackgroundColor: AppColorSchemes.neutral900,
    appBarTheme: const AppBarTheme(
      centerTitle: true,
      elevation: 0,
      backgroundColor: AppColorSchemes.neutral900,
      foregroundColor: AppColorSchemes.white,
    ),
    elevatedButtonTheme: ElevatedButtonThemeData(
      style: ElevatedButton.styleFrom(
        foregroundColor: AppColorSchemes.white,
        backgroundColor: AppColorSchemes.primary500,
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(DesignTokens.radius.md),
        ),
        padding: EdgeInsets.symmetric(
          horizontal: DesignTokens.spacing.s4,
          vertical: DesignTokens.spacing.s3,
        ),
      ),
    ),
  );
}
