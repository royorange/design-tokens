// Generated by Design Tokens - DO NOT EDIT
// Last updated: 2025-08-05T08:04:20.549Z

import 'package:flutter/material.dart';

/// 颜色常量定义
class AppColors {

  // Accent Colors
  static const Color accent50 = Color(0xFFEAEAFD);
  static const Color accent100 = Color(0xFFCBC9F8);
  static const Color accent200 = Color(0xFFA7A7F4);
  static const Color accent300 = Color(0xFF8283F0);
  static const Color accent400 = Color(0xFF6765EC);
  static const Color accent500 = Color(0xFF4F46E5);
  static const Color accent600 = Color(0xFF493DD9);
  static const Color accent700 = Color(0xFF4031CD);
  static const Color accent800 = Color(0xFF3923C1);
  static const Color accent900 = Color(0xFF2B00B0);

  // Neutral Colors
  static const Color neutral40 = Color(0xFFF6F6F6);
  static const Color neutral50 = Color(0xFFE9EBEE);
  static const Color neutral100 = Color(0xFFD3D4D8);
  static const Color neutral200 = Color(0xFFB6B8C0);
  static const Color neutral300 = Color(0xFF999BA8);
  static const Color neutral400 = Color(0xFF838696);
  static const Color neutral500 = Color(0xFF6E7285);
  static const Color neutral600 = Color(0xFF606374);
  static const Color neutral700 = Color(0xFF454650);
  static const Color neutral800 = Color(0xFF202029);
  static const Color neutral900 = Color(0xFF121212);
  static const Color white = Color(0xFFFFFFFF);
  static const Color black = Color(0xFF000000);

  // Red Colors
  static const Color red50 = Color(0xFFFEF2F2);
  static const Color red100 = Color(0xFFFEE2E2);
  static const Color red200 = Color(0xFFFECACA);
  static const Color red300 = Color(0xFFFCA5A5);
  static const Color red400 = Color(0xFFF87171);
  static const Color red500 = Color(0xFFEF4444);
  static const Color red600 = Color(0xFFDC2626);
  static const Color red700 = Color(0xFFB91C1C);
  static const Color red800 = Color(0xFF991B1B);
  static const Color red900 = Color(0xFF7F1D1D);
}


/// 间距常量定义
class AppSpacing {
  static const double spacing0 = 0.0;
  static const double spacing1 = 4.0;
  static const double spacing2 = 8.0;
  static const double spacing3 = 12.0;
  static const double spacing4 = 14.0;
  static const double spacing5 = 16.0;
  static const double spacing6 = 18.0;
  static const double spacing7 = 20.0;
  static const double spacing8 = 24.0;
  static const double spacing9 = 32.0;
  static const double spacing10 = 40.0;
}


/// 圆角常量定义
class AppRadius {
  static const double none = 0.0;
  static const double sm = 4.0;
  static const double md = 6.0;
  static const double lg = 8.0;
  static const double xl = 12.0;
  static const double radius2xl = 16.0;
  static const double full = 9999.0;
}


/// 字体大小常量定义
class AppFontSizes {
  static const double xs = 12.0;
  static const double sm = 14.0;
  static const double base = 16.0;
  static const double lg = 18.0;
  static const double xl = 20.0;
  static const double size2xl = 24.0;
  static const double size3xl = 30.0;
  static const double size4xl = 36.0;
  static const double size5xl = 48.0;
  static const double size6xl = 60.0;
  static const double size7xl = 72.0;
  static const double size8xl = 96.0;
}

/// 字体系列定义
class AppFontFamily {
  static const String cnSans = 'Noto Sans CJK SC';
  static const String cnSerif = 'Noto Serif CJK SC';
  static const String enSans = 'Roboto';
}

/// 按钮样式 Theme Extension
@immutable
class ButtonStylesExtension extends ThemeExtension<ButtonStylesExtension> {
  const ButtonStylesExtension({
    required this.primaryBackground,
    required this.primaryText,
    required this.primaryIconColor,
    required this.secondaryBackground,
    required this.secondaryText,
    required this.secondaryIconColor,
    required this.tertiaryBackground,
    required this.tertiaryText,
    required this.tertiaryIconColor,
  });

  final Color primaryBackground;
  final Color primaryText;
  final Color primaryIconColor;
  final Color secondaryBackground;
  final Color secondaryText;
  final Color secondaryIconColor;
  final Color tertiaryBackground;
  final Color tertiaryText;
  final Color tertiaryIconColor;

  @override
  ButtonStylesExtension copyWith({
    Color? primaryBackground,
    Color? primaryText,
    Color? primaryIconColor,
    Color? secondaryBackground,
    Color? secondaryText,
    Color? secondaryIconColor,
    Color? tertiaryBackground,
    Color? tertiaryText,
    Color? tertiaryIconColor,
  }) {
    return ButtonStylesExtension(
      primaryBackground: primaryBackground ?? this.primaryBackground,
      primaryText: primaryText ?? this.primaryText,
      primaryIconColor: primaryIconColor ?? this.primaryIconColor,
      secondaryBackground: secondaryBackground ?? this.secondaryBackground,
      secondaryText: secondaryText ?? this.secondaryText,
      secondaryIconColor: secondaryIconColor ?? this.secondaryIconColor,
      tertiaryBackground: tertiaryBackground ?? this.tertiaryBackground,
      tertiaryText: tertiaryText ?? this.tertiaryText,
      tertiaryIconColor: tertiaryIconColor ?? this.tertiaryIconColor,
    );
  }

  @override
  ButtonStylesExtension lerp(ThemeExtension<ButtonStylesExtension>? other, double t) {
    if (other is! ButtonStylesExtension) {
      return this;
    }
    return ButtonStylesExtension(
      primaryBackground: Color.lerp(primaryBackground, other.primaryBackground, t)!,
      primaryText: Color.lerp(primaryText, other.primaryText, t)!,
      primaryIconColor: Color.lerp(primaryIconColor, other.primaryIconColor, t)!,
      secondaryBackground: Color.lerp(secondaryBackground, other.secondaryBackground, t)!,
      secondaryText: Color.lerp(secondaryText, other.secondaryText, t)!,
      secondaryIconColor: Color.lerp(secondaryIconColor, other.secondaryIconColor, t)!,
      tertiaryBackground: Color.lerp(tertiaryBackground, other.tertiaryBackground, t)!,
      tertiaryText: Color.lerp(tertiaryText, other.tertiaryText, t)!,
      tertiaryIconColor: Color.lerp(tertiaryIconColor, other.tertiaryIconColor, t)!,
    );
  }

  /// Light theme button styles
  static final light = ButtonStylesExtension(
    primaryBackground: AppColors.accent500,
    primaryText: AppColors.white,
    primaryIconColor: AppColors.white,
    secondaryBackground: AppColors.neutral800,
    secondaryText: AppColors.white,
    secondaryIconColor: AppColors.white,
    tertiaryBackground: AppColors.neutral50,
    tertiaryText: AppColors.neutral800,
    tertiaryIconColor: AppColors.neutral800,
  );

  /// Dark theme button styles
  static final dark = ButtonStylesExtension(
    primaryBackground: AppColors.accent300,
    primaryText: AppColors.neutral900,
    primaryIconColor: AppColors.neutral800,
    secondaryBackground: AppColors.neutral50,
    secondaryText: AppColors.neutral800,
    secondaryIconColor: AppColors.neutral800,
    tertiaryBackground: AppColors.neutral700,
    tertiaryText: AppColors.neutral40,
    tertiaryIconColor: AppColors.neutral40,
  );
}

/// Material 3 ColorScheme definitions
class AppColorSchemes {
  static const ColorScheme lightColorScheme = ColorScheme(
    brightness: Brightness.light,
    primary: AppColors.neutral900,
    onPrimary: AppColors.neutral40,
    primaryContainer: AppColors.neutral50,
    onPrimaryContainer: AppColors.neutral900,
    secondary: AppColors.accent500,
    onSecondary: AppColors.white,
    secondaryContainer: AppColors.accent50,
    onSecondaryContainer: AppColors.accent500,
    tertiary: AppColors.neutral400,
    onTertiary: AppColors.neutral40,
    tertiaryContainer: AppColors.neutral50,
    onTertiaryContainer: AppColors.neutral400,
    error: AppColors.red600,
    onError: AppColors.white,
    errorContainer: AppColors.red50,
    onErrorContainer: AppColors.red600,
    surface: AppColors.neutral40,
    onSurface: AppColors.neutral900,
    onSurfaceVariant: AppColors.neutral400,
    outline: AppColors.neutral100,
    outlineVariant: AppColors.neutral200,
    shadow: AppColors.neutral700,
    scrim: AppColors.neutral900,
    inverseSurface: AppColors.neutral900,
    onInverseSurface: AppColors.neutral40,
    inversePrimary: AppColors.black,
    surfaceContainerLowest: AppColors.neutral50,
    surfaceContainerLow: AppColors.neutral50,
    surfaceContainer: AppColors.white,
    surfaceContainerHigh: AppColors.neutral50,
    surfaceContainerHighest: AppColors.neutral50,
  );

  static const ColorScheme darkColorScheme = ColorScheme(
    brightness: Brightness.dark,
    primary: AppColors.neutral40,
    onPrimary: AppColors.neutral900,
    primaryContainer: AppColors.neutral700,
    onPrimaryContainer: AppColors.neutral40,
    secondary: AppColors.accent300,
    onSecondary: AppColors.neutral900,
    secondaryContainer: AppColors.neutral800,
    onSecondaryContainer: AppColors.neutral40,
    tertiary: AppColors.neutral600,
    onTertiary: AppColors.neutral40,
    tertiaryContainer: AppColors.neutral700,
    onTertiaryContainer: AppColors.neutral200,
    error: AppColors.red600,
    onError: AppColors.red50,
    errorContainer: AppColors.red800,
    onErrorContainer: AppColors.red50,
    surface: AppColors.neutral900,
    onSurface: AppColors.neutral40,
    onSurfaceVariant: AppColors.neutral300,
    outline: AppColors.neutral100,
    outlineVariant: AppColors.neutral200,
    shadow: AppColors.neutral700,
    scrim: AppColors.neutral900,
    inverseSurface: AppColors.neutral40,
    onInverseSurface: AppColors.neutral900,
    inversePrimary: AppColors.black,
    surfaceContainerLowest: AppColors.black,
    surfaceContainerLow: AppColors.black,
    surfaceContainer: AppColors.neutral800,
    surfaceContainerHigh: AppColors.neutral800,
    surfaceContainerHighest: AppColors.neutral800,
  );
}
